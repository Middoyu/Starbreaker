[gd_scene load_steps=4 format=3 uid="uid://cj7jh88a1txx6"]

[sub_resource type="GDScript" id="GDScript_y1aru"]
script/source = "extends Node2D
@onready var internal_cooldown: Timer = $Internal_Cooldown
@onready var hitbox: Area2D = $Hitbox

var max_boost_gauge = 250
var current_boost_gauge = 0
var boost_drain_amount = 0
var boost_direction_vector := Vector2.ZERO

enum BOOST_STATE {
	IDLE,
	CHARGING,
	RELEASE
}
var CURRENT_BOOST_STATE = BOOST_STATE.IDLE

func input_detection():
	charge_boost()
	release_boost()

func action():
	if Input.is_action_just_pressed(\"secondary\") and CURRENT_BOOST_STATE == BOOST_STATE.IDLE:
		CURRENT_BOOST_STATE = BOOST_STATE.CHARGING

func charge_boost():
	if CURRENT_BOOST_STATE == BOOST_STATE.CHARGING:
		current_boost_gauge += 100 * get_physics_process_delta_time()
		current_boost_gauge = clamp(current_boost_gauge, 0, max_boost_gauge)

func release_boost():
	if Input.is_action_just_released(\"secondary\") and CURRENT_BOOST_STATE == BOOST_STATE.CHARGING:
		set_boost_variables(get_global_mouse_position())
	if current_boost_gauge >= max_boost_gauge and CURRENT_BOOST_STATE == BOOST_STATE.CHARGING:
		set_boost_variables(get_global_mouse_position())

func set_boost_variables(direct_boost_to : Vector2):
	print(\"Boosting\")
	var player = global.player as Player
	boost_direction_vector = player.global_position.direction_to(direct_boost_to).normalized()
	remove_player_actions(true)
	hitbox.is_disabled = false
	internal_cooldown.start()
	CURRENT_BOOST_STATE = BOOST_STATE.RELEASE

func boost():
	if CURRENT_BOOST_STATE == BOOST_STATE.RELEASE:
		var player = global.player as Player
		player.velocity = boost_direction_vector * current_boost_gauge * internal_cooldown.time_left
		player.move_and_slide()
		print(str(boost_direction_vector))

func drain_boost_gauge():
	if CURRENT_BOOST_STATE == BOOST_STATE.RELEASE:
		current_boost_gauge -= boost_drain_amount * get_physics_process_delta_time()
		current_boost_gauge = clampf(current_boost_gauge, 0, max_boost_gauge)


func _physics_process(delta: float) -> void:
	print(current_boost_gauge)
	input_detection()
	drain_boost_gauge()
	boost()



func remove_player_actions(yes_or_no : bool):
	var player = global.player
	player.invincibility_override = yes_or_no
	player.is_actionable = !yes_or_no
	player.is_moveable = !yes_or_no

func internal_cooldown_timeout() -> void:
	CURRENT_BOOST_STATE = BOOST_STATE.IDLE
	current_boost_gauge = 0
	remove_player_actions(false)
	hitbox.is_disabled = true
"

[sub_resource type="GDScript" id="GDScript_vsym5"]
script/source = "extends Databox

func _physics_process(delta: float) -> void:
	if is_instance_valid(global.player):
		parent = global.player
		self.global_position = global.player.global_position

func eteam_hurtbox_entered(area: Databox) -> void:
	area.take_damage(self)

func nteam_hurtbox_entered(area: Databox) -> void:
	area.take_damage(self)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_nlg7f"]
radius = 20.0

[node name="BoostScene" type="Node2D"]
script = SubResource("GDScript_y1aru")

[node name="Internal_Cooldown" type="Timer" parent="."]
process_callback = 0
wait_time = 1.25
one_shot = true

[node name="Hitbox" type="Area2D" parent="."]
script = SubResource("GDScript_vsym5")
team_affiliation = "PlayerTeam"
is_disabled = true
damage = 75.0
knockback_amount = 1750.0
knockback_stun_duration = 0.3

[node name="Collision" type="CollisionShape2D" parent="Hitbox"]
shape = SubResource("CircleShape2D_nlg7f")

[connection signal="timeout" from="Internal_Cooldown" to="." method="internal_cooldown_timeout"]
[connection signal="EnemyTeamHurtbox_entered" from="Hitbox" to="Hitbox" method="eteam_hurtbox_entered"]
[connection signal="NeutralTeamHurtbox_entered" from="Hitbox" to="Hitbox" method="nteam_hurtbox_entered"]
