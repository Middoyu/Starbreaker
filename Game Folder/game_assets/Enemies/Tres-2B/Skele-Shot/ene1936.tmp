[gd_scene load_steps=7 format=3 uid="uid://dfepk5fmqyutd"]

[ext_resource type="Texture2D" uid="uid://cayhx6f7xihhd" path="res://Game Folder/game_assets/Stages/1 - Tres-2B/Enemies/Skeleton_Enemy/Sprites/default.png" id="1_6cwf6"]

[sub_resource type="GDScript" id="GDScript_vvde2"]
script/source = "extends Entity

func _physics_process(delta: float) -> void:
	velocity = get_player_vector() * 50 * delta
	move_and_slide()

func parent_death() -> void:
	queue_free()

func parent_hit() -> void:
	print(\"ow\")
"

[sub_resource type="GDScript" id="GDScript_bb1mb"]
script/source = "extends Area2D
class_name Databox
signal parent_hit
signal parent_death

signal PlayerTeamHurtbox_entered(area : Databox)
signal NeutralTeamHurtbox_entered(area : Databox)
signal EnemyTeamHurtbox_entered(area : Databox)

signal PlayerTeamHitbox_entered(area : Databox)
signal NeutralTeamHitbox_entered(area : Databox)
signal EnemyTeamHitbox_entered(area : Databox)

signal is_taking_knockback(duration : float)

@export_category(\"Affiliations\")
@export var parent : CharacterBody2D
@export_enum(\"PlayerTeam\", \"NeutralTeam\", \"EnemyTeam\") var team_affiliation = \"NeutralTeam\"

@export_category(\"Databox Data\")
@export_subgroup(\"Global Data\")
@export_enum(\"Hurtbox\", \"Hitbox\") var databox_type = \"Hitbox\"
@onready var is_disabled := false

@export_subgroup(\"Hitbox Data\")
var hitbox_data := HitboxData.new() as HitboxData
@export var damage := 0.0
@export var knockback_amount := 0.0
@export var knockback_stun_duration : float = 0.0

@export_subgroup(\"Hurtbox Data\")
@export var max_health := 100
@onready var health := max_health
@export var recieves_knockback := true
@export_range(0.0, 1.0) var armor_multiplier := 1.0
@onready var knockback_timer := Timer.new()
@onready var knockback_direction := Vector2.ZERO
@onready var latest_knockback_amount := 0.0

#region Godot Functions
func _ready() -> void:
	connect(\"area_entered\", area_entered, 1)
	knockback_setup()

func _physics_process(delta: float) -> void:
	matching_databox_type()
	check_disable_mode_process()
	update_hitbox_data_process()
	check_knockback_process(delta)
#endregion

#region Runtime Checks
func matching_databox_type(): ## Match databox type to sets of variable changes.
	match databox_type:
		\"Hitbox\":
			change_debug_color(Color.RED)
		\"Hurtbox\":
			change_debug_color(Color.AQUA)

func change_debug_color(color): ## Changes the debug color of the databox collisions.
	for child in get_children():
		if child is CollisionShape2D:
			child.debug_color = color
			child.debug_color.a = 0.1

## Checks the disable mode for the databox. Appropriately changing the state depending on the is_disabled value.
func check_disable_mode_process():
	for child in get_children():
		if child is CollisionShape2D:
			child.disabled = is_disabled


## Aligns the hitbox data to the current stats of the databox.
func update_hitbox_data_process():
	hitbox_data.team_affiliation = team_affiliation
	hitbox_data.damage = damage
	hitbox_data.knockback_amount = knockback_amount
	hitbox_data.knockback_stun_duration = knockback_stun_duration
	## Warns the developer that the data isn't local, causing possible bugs and unintended side effects.
	#if is_instance_valid(hitbox_data) and damage > 0:
		#if hitbox_data.resource_local_to_scene == false:
			#printerr(var_to_str(parent.name) + var_to_str(self.name) + \" doesn't have hitbox data local to it's scene!\")
#endregion

#region Hitbox / Hurtbox Reaction
## Hitbox & Hurtbox reactions based on team affiliation.
func area_entered(area: Area2D) -> void:
	if area is Databox:
		if area.databox_type == \"Hurtbox\": ## Hurtboxes are recievers and do not aggress onto Hitboxes. 
			match area.team_affiliation:
				\"PlayerTeam\":
					emit_signal(\"PlayerTeamHurtbox_entered\", area)
				\"NeutralTeam\":
					emit_signal(\"NeutralTeamHurtbox_entered\", area)
				\"EnemyTeam\":
					emit_signal(\"EnemyTeamHurtbox_entered\", area)
		if area.databox_type == \"Hitbox\": ## Hitboxes are the agressors. Telling the game when they overlap with a hurtbox and letting the hurtbox recieve the data and handle it.
			match area.team_affiliation:
				\"PlayerTeam\":
					emit_signal(\"PlayerTeamHitbox_entered\", area)
				\"NeutralTeam\":
					emit_signal(\"NeutralTeamHitbox_entered\", area)
				\"EnemyTeam\":
					emit_signal(\"EnemyTeamHitbox_entered\", area)

#endregion

func take_damage(colliding_hitbox : Databox):
	emit_signal(\"parent_hit\")
	health = clamp(health - colliding_hitbox.damage, 0, max_health)
	calculate_knockback(colliding_hitbox)
	print(health)
	if health <= 0:
		emit_signal(\"parent_death\")

#region Knockback Reactions
# Higher knockback amounts and lower stun duration results in a snappier knockback effect.
# Lower knockback amounts and higher stun durations are good a long knockback effect.

func knockback_setup():
	knockback_timer.one_shot = true
	add_child(knockback_timer)

func calculate_knockback(colliding_hitbox : Databox):
	## Grabs the knockback data from ther colliding hitbox.
	latest_knockback_amount = colliding_hitbox.knockback_amount
	knockback_direction = colliding_hitbox.global_position.direction_to(parent.global_position)
	## Starts the timer using the knockback duration.
	knockback_timer.start(colliding_hitbox.knockback_stun_duration)
	emit_signal(\"is_taking_knockback\", knockback_stun_duration)


func apply_knockback(delta):
	## New knockback variables to consolidate the data.
	var knockback_velocity = Vector2.ZERO
	var knockback_scalar = 3.0
	## Multiplies the knockback direction to the amount.
	knockback_velocity = knockback_direction * latest_knockback_amount
	## Makes sure the knockback always sends upwards.
	knockback_velocity.y = -abs(knockback_velocity.y)
	## Applies the vector.
	parent.velocity = knockback_velocity * delta
	
	parent.move_and_slide()
	## Multiplies the knockback amount to the time left on the timer to create a smoothing effect.
	latest_knockback_amount *= knockback_timer.time_left * knockback_scalar * armor_multiplier

func check_knockback_process(delta):
	if knockback_timer.time_left > 0 and recieves_knockback == true:
		apply_knockback(delta)
#endregion
"

[sub_resource type="CircleShape2D" id="CircleShape2D_3n1ei"]
radius = 8.0

[sub_resource type="GDScript" id="GDScript_o151b"]
resource_name = "enemy_hitbox"
script/source = "extends Databox


func pteam_hurtbox_entered(area: Databox) -> void:
	area.take_damage(self)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_el4kx"]
radius = 8.0

[node name="Enemy" type="CharacterBody2D"]
position = Vector2(200, 72)
motion_mode = 1
script = SubResource("GDScript_vvde2")

[node name="Sprite" type="Sprite2D" parent="."]
texture = ExtResource("1_6cwf6")
hframes = 2

[node name="Hurtbox" type="Area2D" parent="." node_paths=PackedStringArray("parent")]
script = SubResource("GDScript_bb1mb")
parent = NodePath("..")
team_affiliation = "EnemyTeam"
databox_type = "Hurtbox"

[node name="Collision" type="CollisionShape2D" parent="Hurtbox"]
shape = SubResource("CircleShape2D_3n1ei")

[node name="Hitbox" type="Area2D" parent="." node_paths=PackedStringArray("parent")]
script = SubResource("GDScript_o151b")
parent = NodePath("..")
team_affiliation = "EnemyTeam"
damage = 1.0

[node name="Collision" type="CollisionShape2D" parent="Hitbox"]
shape = SubResource("CircleShape2D_el4kx")

[connection signal="parent_death" from="Hurtbox" to="." method="parent_death"]
[connection signal="parent_hit" from="Hurtbox" to="." method="parent_hit"]
[connection signal="PlayerTeamHurtbox_entered" from="Hitbox" to="Hitbox" method="pteam_hurtbox_entered"]
